public List<string> GetSegwayStatusForDropDown()
{
    List<string> statusList = null;

    try
    {
        statusList = _segwayAccessor.SelectAllStatus();

        if (statusList == null || statusList.Count == 0)
        {
            throw new ArgumentException("Segways not found");
        }
    }

    catch (Exception ex)
    {
        throw new ApplicationException("Not found", ex);
    }
    return statusList;
}

public List<string> GetSegwayTypesForDropDown()
{
    List<string> typeList = null;

    try
    {
        typeList = _segwayAccessor.SelectAllType();

        if (typeList == null || typeList.Count == 0)
        {
            throw new ArgumentException("Segways not found");
        }
    }

    catch (Exception ex)
    {
        throw new ApplicationException("Not found", ex);
    }
    return typeList;
}








public List<string> SelectAllStatus()
{
    List<string> result = new List<string>();            

    // connection
    var conn = SqlConnectionProvider.GetConnection();

    // command text
    var cmdText = "Select_all_Status";

    // command
    var cmd = new SqlCommand(cmdText, conn);

    // command type
    cmd.CommandType = CommandType.StoredProcedure;            

    try
    {
        // open the connection
        conn.Open();

        // execute
        var reader = cmd.ExecuteReader();

        // process the results
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                result.Add(reader.GetString(0));                            
            }
        }
        else
        {
            throw new ArgumentException("Status types not found.");
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }
    finally
    {
        conn.Close();
    }
    return result;
}

public List<string> SelectAllType()
{
    List<string> result = new List<string>();

    // connection
    var conn = SqlConnectionProvider.GetConnection();

    // command text
    var cmdText = "Select_all_Type";

    // command
    var cmd = new SqlCommand(cmdText, conn);

    // command type
    cmd.CommandType = CommandType.StoredProcedure;

    try
    {
        // open the connection
        conn.Open();

        // execute
        var reader = cmd.ExecuteReader();

        // process the results
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                result.Add(reader.GetString(0));
            }
        }
        else
        {
            throw new ArgumentException("Status types not found.");
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }
    finally
    {
        conn.Close();
    }
    return result;
}